{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"g",
				"gfx_context"
			],
			[
				"uin",
				"uint16_t"
			],
			[
				"type",
				"typedef"
			],
			[
				"uint",
				"uint32_t"
			],
			[
				"O",
				"OBJS"
			],
			[
				"link",
				"links_count"
			],
			[
				"struc",
				"vbe_mode_info_structure"
			],
			[
				"frame",
				"framebuffer"
			],
			[
				"vi",
				"vid_info"
			],
			[
				"vbe",
				"vbe_mode_info_structure"
			],
			[
				"inode",
				"inode_num"
			],
			[
				"ext2_blo",
				"ext2_blockdesc_rw"
			],
			[
				"grou",
				"groupnum"
			],
			[
				"block",
				"block_group_descriptor"
			],
			[
				"bloc",
				"block_group"
			],
			[
				"bg",
				"block_group_descriptor"
			],
			[
				"bit",
				"bitmap"
			],
			[
				"inodes",
				"inodes_per_group"
			],
			[
				"blcok",
				"blocknum"
			],
			[
				"ext2",
				"ext2_superblock"
			],
			[
				"blo",
				"block_group"
			],
			[
				"pr",
				"printf	printf â€¦"
			],
			[
				"buff",
				"buffer_write"
			],
			[
				"free",
				"free_blocks_count"
			],
			[
				"vid",
				"vid_info	label"
			],
			[
				"V",
				"VbeSignature"
			],
			[
				"VBE",
				"VbeInfoBlock"
			],
			[
				"mem",
				"mem_end"
			],
			[
				"ba",
				"base_low"
			],
			[
				"print",
				"print_hex	label"
			],
			[
				"prin",
				"printx"
			],
			[
				"pritn",
				"printx"
			],
			[
				"read",
				"read_disk	label"
			],
			[
				"re",
				"read_two	label"
			],
			[
				"secto",
				"sector_count			db	label"
			],
			[
				"inod",
				"inode_five_block	label"
			],
			[
				"ino",
				"inode_num"
			],
			[
				"i",
				"inode_num"
			],
			[
				"inde",
				"indirect"
			],
			[
				"fil",
				"file_name"
			],
			[
				"ext2_writ",
				"ext2_write_inode"
			],
			[
				"ext2_wr",
				"ext2_write_inode"
			],
			[
				"boot",
				"bootloader"
			],
			[
				"boo",
				"bootloader"
			],
			[
				"LD",
				"LDFLAGS"
			],
			[
				"C",
				"CCFLAGS"
			],
			[
				"ide_",
				"ide_read"
			],
			[
				"ext",
				"ext2_bootloader"
			],
			[
				"size",
				"size_t"
			],
			[
				"arg",
				"argv"
			],
			[
				"BLOCK",
				"BLOCK_SIZE"
			],
			[
				"siz",
				"sizeof"
			],
			[
				"buffer",
				"buffer_write"
			],
			[
				"e_ph",
				"e_phoff"
			],
			[
				"elf",
				"elf32_phdr"
			],
			[
				"vfs",
				"vfs_entry"
			],
			[
				"ext2_open",
				"ext2_open_dir"
			],
			[
				"RTYC",
				"RTC_DAY"
			],
			[
				"year",
				"years"
			],
			[
				"day",
				"days"
			],
			[
				"hor",
				"hours"
			],
			[
				"time",
				"time_t"
			],
			[
				"RTC",
				"RTC_SEC"
			],
			[
				"fr",
				"free_inodes_count"
			],
			[
				"ide",
				"idequeue"
			],
			[
				"bu",
				"buffer_get"
			],
			[
				"B_",
				"B_BUSY"
			],
			[
				"ac",
				"acquire"
			],
			[
				"ma",
				"markov"
			],
			[
				"wor",
				"wordlist"
			],
			[
				"tot",
				"total_words"
			],
			[
				"nex",
				"nextw	statement"
			],
			[
				"ne",
				"nextw	statement"
			],
			[
				"rad",
				"readline	function"
			],
			[
				"k_pa",
				"k_page_alloc"
			],
			[
				"_ini",
				"_init_pd	label"
			],
			[
				"KE",
				"KERNEL_VIRT"
			],
			[
				"KERNEL",
				"KERNEL_VIRT"
			],
			[
				"_",
				"_init_pt"
			],
			[
				"KERNE",
				"KERNEL_VIRT"
			],
			[
				"K",
				"KERNEL_PAGE_DIRECTORY"
			],
			[
				"KER",
				"KERNEL_VIRT"
			],
			[
				"KERN",
				"KERNEL_VIRT"
			],
			[
				"MM",
				"MM_CURRENT_PD"
			],
			[
				"_in",
				"_init_pd"
			],
			[
				"stack",
				"stack_top"
			],
			[
				"sta",
				"stack_top"
			],
			[
				"kerne",
				"kernel_initialize"
			],
			[
				"PF",
				"PF_RW"
			],
			[
				"add",
				"address"
			],
			[
				"_init",
				"_init_pd"
			],
			[
				"CU",
				"CURRENT_PAGE_DIRECTORY"
			],
			[
				"0x",
				"0x00000010"
			],
			[
				"chil",
				"child_esp"
			],
			[
				"te",
				"test_user_function"
			],
			[
				"sys",
				"system_tss"
			],
			[
				"page",
				"pagedir"
			],
			[
				"pare",
				"parent_esp"
			],
			[
				"last",
				"last_alloc"
			],
			[
				"las",
				"LAST_ALLOC"
			],
			[
				"K_",
				"K_LAST_ALLOC"
			],
			[
				"bc",
				"bc_start"
			],
			[
				"m",
				"memlock"
			],
			[
				"hea",
				"heap_top"
			],
			[
				"malloc",
				"malloc_t"
			],
			[
				"find",
				"find_first_free"
			],
			[
				"k",
				"k_paging_unmap"
			],
			[
				"des",
				"dest_free"
			],
			[
				"va",
				"va_dest"
			],
			[
				"k_",
				"k_paging_map"
			],
			[
				"k_p",
				"k_paging_unmap"
			],
			[
				"_paging",
				"_paging_map_more"
			],
			[
				"pa_",
				"pa_src"
			],
			[
				"_p",
				"_paging_get_phys"
			],
			[
				"0x3",
				"0x3FF"
			],
			[
				"is",
				"is_mapped"
			],
			[
				"pa",
				"page_tables_needed"
			],
			[
				"_pa",
				"_paging_map"
			],
			[
				"_pag",
				"_upaging_map"
			],
			[
				"dest",
				"dest_pt"
			],
			[
				"src",
				"src_pt"
			],
			[
				"load",
				"k_paging_load_directory"
			],
			[
				"proc",
				"process"
			],
			[
				"spi",
				"spin_unlock"
			],
			[
				"spin",
				"spin_lock"
			],
			[
				"cur",
				"current_pid"
			],
			[
				"pro",
				"proc_link"
			],
			[
				"heap",
				"heap_brk"
			]
		]
	},
	"buffers":
	[
		{
			"file": "kernel/elf.c",
			"settings":
			{
				"buffer_size": 4096,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "/*\nide.c\n================================================================================\nMIT License\nCopyright (c) 2007-2016 Michael Lazear\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n================================================================================\nDisk buffer cache/LBA read/write support ala XV6\n*/\n\n#include <types.h>\n#include <x86.h>\n#include <mutex.h>\n#include <traps.h>\n#include <ide.h>\n#include <assert.h>\n\nvoid sleep(void* channel, mutex* m) {}\nvoid wake(void* channel) {} \n\n\nmutex idelock = {.lock = 0};		// spinlock for disk access\nbuffer* idequeue;					// cache of buffer access\nint IDE_STATUS = 0;				// Dev 1 present?\n\n/*\nWait for IDE device to become ready\ncheck =  0, do not check for errors\ncheck != 0, return -1 if error bit set\n*/\nint ide_wait(int check) {\n	char r;\n\n	// Wait while drive is busy. Once just ready is set, exit the loop\n	while (((r = (char)inb(IDE_IO | IDE_CMD)) & (IDE_BSY | IDE_RDY)) != IDE_RDY);\n\n	// Check for errors\n	if (check && (r & (IDE_DF | IDE_ERR)) != 0)\n		return -1;\n	return 0;\n}\n\n// Delay 400 ns\n int ide_delay() {\n	char ret = 0;\n	for (int i = 0; i < 5; i++)\n		ret = (char)inb(IDE_ALT);\n	return ret;\n}\n\nstatic void ide_op(buffer* b) {\n	if (!b)\n		panic(\"ide_op\");\n	//printf(\"Begin op on dev %d block %d\\n\", b->dev, b->block );\n\n	assert(b->dev);\n	int sector_per_block = BLOCK_SIZE / SECTOR_SIZE;	// 1\n	int sector = b->block * sector_per_block;\n\n	ide_wait(0);\n	outb(IDE_ALT, 0);	// Generate interrupt\n	outb(IDE_IO | IDE_SECN, sector_per_block);	// # of sectors\n	outb(IDE_IO | IDE_LOW, LBA_LOW(sector));\n	outb(IDE_IO | IDE_MID, LBA_MID(sector));\n	outb(IDE_IO | IDE_HIGH, LBA_HIGH(sector));\n	// Slave/Master << 4 and last 4 bits\n	outb(IDE_IO | IDE_HEAD, 0xE0 | ((b->dev & 1) << 4) | LBA_LAST(sector));	\n\n	if (b->flags & B_DIRTY) {						// Need to write\n		outb(IDE_IO | IDE_CMD, IDE_CMD_WRITE);\n		outsl(IDE_IO, b->data, BLOCK_SIZE / 4);		// Write in 4 byte chunks\n	} else {										// Read only\n		outb(IDE_IO | IDE_CMD, IDE_CMD_READ);\n	}\n}\n\n/*\nActual reading of data takes place in the interrupt handler\n*/\nvoid ide_handler() {\n	acquire(&idelock);\n	//vga_pretty(\"IDE: \", 0xC);\n	buffer* b = idequeue;\n\n	assert(b);\n	if(!b) {\n		release(&idequeue);\n		return;\n	}\n	idequeue = b->q;\n	//assert(idequeue);\n\n	//if dirty is not set, and no errors, read data\n	int stat = ide_wait(1);\n	assert(stat >= 0);\n\n	if (!(b->flags & B_DIRTY) && stat >= 0) {\n		insl(0x1f0, b->data, BLOCK_SIZE/4);\n		//printf(\"Reading data to buffer %x dev %d block %d\\n\", b, b->dev, b->block);\n	}\n\n	b->flags |= B_VALID;	// set valid flag\n	b->flags &= ~B_DIRTY;	// clear dirty flag\n	ide_delay();\n	wake(b);\n	// Move to next item in queue\n	//assert(idequeue != 0);\n	if (idequeue != 0)\n		ide_op(idequeue);\n\n	release(&idelock);\n}\n\nvoid ide_init() {\n	acquire(&idelock);\n\n	pic_enable(IRQ_IDE);\n	ide_wait(0);\n\n	// Is disk 1 present?\n	outb(IDE_IO | IDE_HEAD, (1<<4));\n\n	for (int i = 0; i < 1000; i++) {\n		if (inb(IDE_IO | IDE_CMD)) {\n			IDE_STATUS = 1;\n			break;\n		}\n	}\n\n\n	printf(\"IDE status: %d\\n\", IDE_STATUS);\n	//outb(IDE_IO | IDE_HEAD, 0xE0 | (0<<4));\n	release(&idelock);\n}\n\nint check_buf(buffer* b) {\n	return (b->flags & (B_VALID | B_DIRTY) != B_VALID);\n}\n	\nint ide_rw(buffer* b) {\n	if ((b->flags & (B_VALID | B_DIRTY)) == B_VALID)\n		return -1;	// only valid is set, nothing to read or write\n	if (b->dev != 1)\n		return -2;\n\n	buffer** pp;\n	b->q = 0;\n	for(pp = &idequeue; *pp; pp = &(*pp)->q) \n		;	// Cycle through all valid next's.\n	*pp = b;	// b is now appended.\n\n	//assert(idequeue == b);\n	if (idequeue == b)\n		ide_op(b);	// If this is only item in queue, start operation.\n	\n	//assert( b->flags & (B_VALID | B_DIRTY) != B_VALID);\n//	while(check_buf(b))\n		sleep(b, &idelock);	// Sleep until VALID is set and DIRTY is clear\n	assert(ide_wait(1) == 0);\n	return 0;\n}\n\n\nstruct {\n	mutex lock;\n	buffer* list;\n} cache;\n\nvoid buffer_init() {\n	cache.list = malloc(sizeof(buffer) * MAX_OP_BLOCKS);\n	int i = 0;\n	buffer* b;\n	for (b = cache.list; b < (cache.list + MAX_OP_BLOCKS - 1); b++) {\n		b->next = b+1;\n		b->dev = -1;\n	}\n	//b++;\n	b->next = NULL;\n	b->dev = -1;\n}\n\n// Converts to same endian-ness as sublime for hex viewing\nuint32_t byte_order(uint32_t i) {\n	uint32_t x;\n	uint8_t* bytes = (uint8_t*) &x;\n	bytes[0] = i >> 24 & 0xFF;\n	bytes[1] = i >> 16 & 0xFF;\n	bytes[2] = i >> 8 & 0xFF;\n	bytes[3] = i & 0xFF;\n	return x;\n}\n\nvoid buffer_dump(buffer *b) {\n	assert(b);\n	assert(b->flags & B_VALID);\n	//assert(idequeue == b);\n	for (int i = 0; i < BLOCK_SIZE; i += 4) {\n		if (i % 32 == 0 && i)\n			vga_putc('\\n');\n		int o = byte_order(*(uint32_t*)((uint32_t)b->data + i));\n		if(o)\n		printf(\"%x \", o);\n\n\n	}\n}\n\n/* For debugging purposes */\nvoid buffer_traverse() {\n	buffer** b;\n	int i = 0;\n	for (b = &cache.list; *b; b = &(*b)->next) {\n		printf(\"%d this %x that %x\\n\", i++, *b, (*b)->next);\n	}\n	printf(\"IDEque %x\\n\", idequeue);\n}\n\nbuffer* buffer_get(uint32_t dev, uint32_t block) {\n	buffer* b;\n	acquire(&cache.lock);\nloop:\n	for (b = cache.list; b; b = b->next) {\n		if (b->dev == dev && b->block == block) {\n			//printf(\"Buffer found\\n\");\n			if (!(b->flags & B_BUSY)) {		// Is buffer free?\n				b->flags |= B_BUSY;			// Mark buffer as in-use\n				release(&cache.lock);\n				return b;\n			}\n			sleep(b, &cache.lock);			// Wait until that block is free\n			release(&cache.lock);\n			return b;\n		//	goto loop;					// Without MT, this freezes\n		}\n	}\n\n	/* Block not in cache. See if we can find a block that is not busy,\n	and not dirty, and then return it. */\n/*	for (b = cache.list; b; b = b->next) {\n		if ((b->flags & B_DIRTY) == 0 && (b->flags & B_BUSY) == 0) {\n			b->dev = dev;\n			b->block = block;\n			b->flags = B_BUSY;\n			release(&cache.lock);\n			return b;\n		}\n	}\n*/\n	/* Worst case scenario - no free blocks. So we malloc a new block, and \n	add it to the end of the list */\n\n	buffer** bp;\n	for (bp = &cache.list; *bp; bp = &(*bp)->next)\n		; \n	*bp = malloc(sizeof(buffer));\n	(*bp)->dev = dev;\n	(*bp)->block = block;\n	(*bp)->flags = B_BUSY;\n	//(*bp)->next = NULL;\n	\n	release(&cache.lock);\n	return *bp;\n}\n\nbuffer* buffer_read(uint32_t dev, uint32_t block) {\n	buffer* b = buffer_get(dev, block);\n	int i = -1;\n	if ( !(b->flags & B_VALID)) 	// Block not read yet\n		i = ide_rw(b);\n\n	if (i == -1 &  !(b->flags & B_VALID) ) {\n		ide_delay();\n		buffer_read(dev, block);\n	}\n	//ide_wait(1);\n	// /printf(\"Escape\\n\");\n	return b;\n}\n\nvoid buffer_write(buffer* b) {\n	//assert((b->flags & B_BUSY) == 0);\n	b->flags |= B_DIRTY; 		// Set write flag\n	ide_rw(b);\n}\n\nvoid buffer_free(buffer* b) {\n	buffer* bp;\n	acquire(&cache.lock);\n	for (bp = cache.list; bp != b; bp = bp->next);\n	bp++;\n	bp->flags = 0;\n	bp->block = -1;\n	memset(bp->data, 0, BLOCK_SIZE);\n	free(b);\n	release(&cache.lock);\n}\n\n/*\n\nbrainstorming new buffer scheme:\nfind a way to recycle buffers like xv6, but prevent important\nblocks from being recycled (superblock, group desc, etc).\nMaybe don't allocate all 16 blocks at once?\n\nKeep DIRTY flag, add a CRITICAL flag (superblock)",
			"file": "kernel/ide.c",
			"file_size": 7944,
			"file_write_time": 131171723322315762,
			"settings":
			{
				"buffer_size": 7885,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 81.0,
		"last_filter": "impr",
		"selected_items":
		[
			[
				"impr",
				"Set Syntax: C Improved"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"nasm",
				"Set Syntax: Assembly x86 (NASM)"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"anacoda",
				"Anaconda: Disable linting on this file"
			],
			[
				"delint",
				"Anaconda: Disable linting on this file"
			],
			[
				"dislint",
				"Anaconda: Disable linting on this file"
			],
			[
				"install package",
				"Package Control: Install Package"
			],
			[
				"packag",
				"Preferences: Browse Packages"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 160.0,
		"history":
		[
			"def fastaUniProt(x):",
			"fastaUniProt()",
			"stop()",
			"exit()",
			"help",
			"help()",
			"version()",
			"version",
			"import numpy.matrix",
			"import numpy",
			"names = [[][]]",
			"names",
			"names[1].append(2)",
			"names[0].append(1)",
			"names",
			"names=[[]]",
			"names[1].append(1)",
			"names",
			"names.append(1)",
			"names",
			"names[0].append(1)",
			"names",
			"names.append(1)",
			"names",
			"names=[[]]",
			"names",
			"names=[]",
			"names = [1][1]",
			"next(c)",
			"reader = csv.reader(c, delimiter='\\t')",
			"reader = csv.read(c, delimiter='\\t')",
			"import csv",
			"c = open('compare.txt')",
			"c.read()",
			"c",
			"c.read()",
			"c",
			"c = open('compare.txt')",
			"print(\"hello\")",
			"help()",
			"help",
			"dir()",
			"dir",
			"ls",
			"c",
			"py",
			"python",
			"sublimetest",
			"b",
			"help",
			"python --version",
			"python",
			"function1",
			"x",
			"function(h)",
			"function",
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/D/Documents/GitHub/baremetal/kernel/mp.c",
		"/D/Documents/GitHub/xv6-public/init.c",
		"/D/Documents/GitHub/xv6-public/kbd.c",
		"/D/Documents/GitHub/baremetal/kernel/kernel.c",
		"/D/Documents/GitHub/xv6-public/fs.c",
		"/D/Documents/GitHub/xv6-public/file.c",
		"/D/Documents/GitHub/xv6-public/Makefile",
		"/D/Documents/GitHub/xv6-public/sh.c",
		"/D/Documents/GitHub/xv6-public/console.c",
		"/D/Documents/GitHub/baremetal/kernel/paging.c",
		"/D/Documents/GitHub/baremetal/kernel/syscall.c",
		"/D/Documents/GitHub/xv6-public/proc.h",
		"/D/Documents/GitHub/xv6-public/mp.h",
		"/D/Documents/GitHub/xv6-public/ioapic.c",
		"/D/Documents/GitHub/xv6-public/memlayout.h",
		"/D/Documents/GitHub/xv6-public/lapic.c",
		"/D/Documents/GitHub/xv6-public/proc.c",
		"/D/Documents/GitHub/xv6-public/mp.c",
		"/D/Documents/GitHub/bootloader/stage2/elf.c",
		"/D/Documents/GitHub/bootloader/bootstrap.asm",
		"/D/Documents/GitHub/bootloader/stage2/main.c",
		"/C/Users/Michael/AppData/Local/Temp/Temp1_ex11.zip/ex11.c",
		"/D/Documents/GitHub/bootloader/disk.img",
		"/D/Documents/GitHub/xv6-public/defs.h",
		"/D/Documents/GitHub/xv6-public/mmu.h",
		"/D/Documents/GitHub/xv6-public/param.h",
		"/D/Documents/GitHub/xv6-public/x86.h",
		"/D/Documents/GitHub/baremetal/Makefile",
		"/D/Documents/GitHub/asm/test.asm",
		"/D/Documents/GitHub/echo/echo.asm",
		"/D/Documents/GitHub/64.asm",
		"/D/Documents/GitHub/ext2util/Makefile",
		"/D/Documents/GitHub/ext2util/ext2.c",
		"/D/Documents/GitHub/ext2util/file.c",
		"/D/Documents/GitHub/ext2util/dir.c.s",
		"/D/Documents/GitHub/ext2util/file.s",
		"/D/Documents/GitHub/ext2util/ext2.o",
		"/D/Documents/GitHub/ext2util/file.c.s",
		"/D/Documents/GitHub/ext2util/ext2.c.s",
		"/D/Documents/GitHub/markov/Makefile",
		"/D/Documents/GitHub/bootloader/stage1.bin",
		"/D/Documents/GitHub/bootloader/boot.img",
		"/D/Documents/GitHub/ext2util/debug.c",
		"/D/Documents/GitHub/ext2util/dir.c",
		"/D/Documents/GitHub/ext2util/inode.c",
		"/D/Documents/GitHub/ext2util/ext2.h",
		"/D/Documents/GitHub/baremetal/kernel/mm.c",
		"/D/Documents/GitHub/bootloader/Makefile",
		"/D/Documents/GitHub/bootloader/README.md",
		"/D/Downloads/snapshot.06.10.09/asm/bootsect",
		"/D/Downloads/snapshot.06.10.09/asm/bootsect.asm",
		"/D/Documents/GitHub/a.out",
		"/D/Documents/GitHub/64.elf",
		"/D/Documents/GitHub/64",
		"/D/Documents/GitHub/bootloader/stage2/ext2.c",
		"/D/Documents/GitHub/64.o",
		"/D/Documents/GitHub/markov/ll",
		"/D/Documents/GitHub/echo/build.sh",
		"/D/Documents/GitHub/bootloader/o",
		"/D/Documents/GitHub/bootloader/o.s",
		"/D/Documents/GitHub/baremetal/kernel/arch/start.s",
		"/D/Documents/GitHub/bootloader/stage1",
		"/D/Documents/GitHub/bootloader/stage2.bin",
		"/D/Documents/GitHub/bootloader/ext2_bootloader.c",
		"/D/Documents/GitHub/bootloader/stage2.asm",
		"/D/Documents/GitHub/bootloader/ext2.h",
		"/D/Documents/GitHub/bootloader/stage2",
		"/D/Documents/GitHub/bootloader/.gitignore",
		"/D/Documents/GitHub/baremetal/kernel/arch/x86.c",
		"/D/Documents/GitHub/baremetal/kernel/lib/string.c",
		"/D/Documents/GitHub/baremetal/kernel/ext2.c",
		"/D/Documents/GitHub/osdev-test/cboot.c",
		"/D/Documents/GitHub/baremetal/kernel/elf.c",
		"/D/Documents/GitHub/ext2util/ext2_debug.c",
		"/D/Documents/GitHub/xv6-public/bootmain.c",
		"/D/Documents/GitHub/bootloader/defs.h",
		"/D/Documents/GitHub/osdev-test/bootstrap.asm",
		"/D/Documents/GitHub/baremetal/kernel/ide.c",
		"/D/Documents/GitHub/xv6-public/bootasm.S",
		"/D/Documents/GitHub/osdev-test/Makefile",
		"/D/Documents/GitHub/baremetal/kernel/lib/stdlib.c",
		"/D/Documents/GitHub/bootloader/bootloader",
		"/D/Documents/GitHub/ext2util/ext2_bootloader.c",
		"/D/Documents/GitHub/ext2util/elf.h",
		"/D/Documents/GitHub/baremetal/kernel/include/ide.h",
		"/D/Documents/GitHub/markov/markov.c",
		"/D/Documents/GitHub/baremetal/kernel/ext2_bootloader.c",
		"/D/Documents/GitHub/baremetal/kernel/ext2_debug.c",
		"/D/Documents/GitHub/ext2util/README.md",
		"/D/Documents/GitHub/ext2util/ide.h",
		"/D/Documents/GitHub/baremetal/kernel/vga.c",
		"/D/Documents/GitHub/baremetal/kernel/malloc.c",
		"/D/Documents/GitHub/osdev-test/elfloader.c",
		"/D/Documents/GitHub/baremetal/kernel/vfs.c",
		"/D/Documents/GitHub/baremetal/kernel/stage2.asm",
		"/D/Documents/GitHub/baremetal/kernel/include/ext2.h",
		"/D/Documents/GitHub/baremetal/kernel/include/types.h",
		"/D/Documents/GitHub/baremetal/ext2.img",
		"/D/Documents/GitHub/osdev-test/test.c",
		"/D/Documents/GitHub/osdev-test/bootstrap",
		"/D/Documents/GitHub/baremetal/kernel/app.asm",
		"/D/Documents/GitHub/baremetal/kernel/include/elf.h",
		"/D/Documents/GitHub/baremetal/kernel/int32_test.c",
		"/D/Documents/GitHub/baremetal/kernel/rtc.c",
		"/D/Documents/GitHub/baremetal/linker.ld",
		"/D/Documents/GitHub/baremetal/kernel/arch/trap.c",
		"/D/Documents/GitHub/osdev-test/boot",
		"/D/Documents/GitHub/baremetal/app.sso",
		"/D/Documents/GitHub/baremetal/app.ld",
		"/D/Documents/GitHub/baremetal/kernel/app.o",
		"/D/Documents/GitHub/baremetal/kernel/bootstrap",
		"/D/Documents/GitHub/baremetal/kernel/include/elf32.h",
		"/D/Documents/GitHub/xv6-public/elf.h",
		"/D/Documents/GitHub/osdev-test/linker.ld",
		"/D/Documents/GitHub/osdev-test/boot.s",
		"/D/Documents/GitHub/baremetal/ext.img",
		"/D/Documents/GitHub/baremetal/fs.img",
		"/D/Documents/GitHub/baremetal/kernel/include/ctype.h",
		"/D/Documents/GitHub/baremetal/kernel/include/assert.h",
		"/D/Documents/GitHub/markov/plot",
		"/D/Documents/GitHub/markov/exac",
		"/D/Documents/GitHub/markov/markov.py",
		"/D/Documents/GitHub/markov/test",
		"/D/Documents/GitHub/markov/LICENSE",
		"/D/Documents/GitHub/baremetal/kernel/timer.c",
		"/D/Documents/GitHub/baremetal/kernel/keyboard.c",
		"/D/Documents/GitHub/baremetal/kernel/arch/switch_to_user.s",
		"/D/Documents/GitHub/baremetal/kernel/arch/sched.s"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 102.0,
		"where_history":
		[
			"D:\\Documents\\GitHub\\xv6-public",
			"<current file>",
			"D:\\Documents\\GitHub\\xv6-public",
			"D:\\Documents\\GitHub\\baremetal",
			"C:\\Users\\Mike\\Documents\\GitHub\\baremetal",
			"D:\\Documents\\GitHub\\baremetal\\",
			"D:\\Documents\\GitHub\\baremetal",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"consoleintr",
			"stderr",
			"stdin",
			"VbeInfoBlock",
			"vid_info",
			"video_map",
			"uint32",
			"uint8",
			"uint16",
			"Mode",
			"uint32",
			"uint8",
			"uint16",
			"bit",
			"set_",
			"blocks",
			"ext_first_free",
			"ext2_inode",
			"i",
			"ext2_inode",
			"ext_first_free",
			"      ",
			"         ",
			"        ",
			"       ",
			"      ",
			"              ",
			"                        ",
			";   ",
			"   ",
			"                               ",
			"         ",
			"0",
			"                               ",
			"                              ",
			"                             ",
			"                            ",
			"                           ",
			"                          ",
			"                         ",
			"                        ",
			"                       ",
			"                        ",
			";   ",
			"                              ",
			"                               ",
			"]\n",
			"e_shentsize",
			"e_phentsize",
			"	;",
			"	   ",
			"	 ",
			"	       ",
			"	         ",
			"	            ",
			"	                ",
			"                          ",
			"                               ",
			"                          ",
			"                         ",
			"                        ",
			"                       ",
			"                      ",
			"                     ",
			"                    ",
			"                   ",
			"                  ",
			"                 ",
			"                ",
			"               ",
			"              ",
			"             ",
			"            ",
			"           ",
			"          ",
			"         ",
			"        ",
			"       ",
			"      ",
			"       ",
			"      ",
			"           ",
			"          ",
			"         ",
			"        ",
			"       ",
			"      ",
			"       ",
			"      ",
			"                                                 ",
			"                                                ",
			"                                               ",
			"                                              ",
			"                                             ",
			"                                            ",
			"                                           ",
			"                                          ",
			"                                         ",
			"                                        ",
			"                                       ",
			"                                      ",
			"                                     ",
			"                                    ",
			"                                   ",
			"                                  ",
			"                                 ",
			"                                ",
			"                               ",
			"                              ",
			"                             ",
			"                            ",
			"                           ",
			"                          ",
			"                         ",
			"                        ",
			"                       ",
			"                      ",
			"                     ",
			"                    ",
			"                   ",
			"                  ",
			"                 ",
			"                ",
			"               ",
			"              ",
			"             ",
			"            ",
			"           "
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"",
			"%x\\n",
			"K",
			"printf",
			"ISR_MACRO",
			"",
			"Reverse_"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "kernel/elf.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4096,
						"regions":
						{
						},
						"selection":
						[
							[
								2793,
								2793
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1143.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "kernel/ide.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7885,
						"regions":
						{
						},
						"selection":
						[
							[
								7834,
								7834
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5408.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 36.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.471354166668,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 332.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "baremetal.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"r",
				"C:\\Users\\Mike\\Documents\\GitHub\\baremetal\\kernel\\lib\\string.c"
			],
			[
				"heap.c",
				"C:\\Users\\Mike\\Documents\\GitHub\\baremetal\\kernel\\paging.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"D:\\Documents\\GitHub\\baremetal\\baremetal.sublime-project"
			],
			[
				"kegg",
				"C:\\Users\\Mike\\Documents\\GitHub\\kegg\\kegg.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
